import tpIntegrador.*

test "Test de prueba" {
	assert.equals(4, 2 + 2)
}

const fenderNegra = new FenderStratocaster(color="negro")
test "Fender esta afinada" {
	assert.equals(true, fenderNegra.afinado())
}

test "Fender negra cuesta 15" {
	assert.equals(15, fenderNegra.costo())
}
const fenderRoja = new FenderStratocaster(color="rojo")
test "Fender roja cuesta 10" {
	assert.equals(10, fenderRoja.costo())
}

test "Una Fender es valiosa" {
	assert.equals(true, fenderNegra.esValioso() && fenderRoja.esValioso())
}

const jupiter20 = new Jupiter(sordina=false, temperatura=20)
test "Una trompeta Júpiter a una temperatura ambiente de 20 grados está afinada" {
    assert.equals(true, jupiter20.afinado())
}

const jupiter25 = new Jupiter(sordina=false, temperatura=25)
test "Una trompeta Júpiter a una temperatura ambiente de 25 grados está afinada" {
    assert.equals(true, jupiter25.afinado())
}

const jupiter19 = new Jupiter(sordina=false, temperatura=19)
test "Una trompeta Júpiter a una temperatura ambiente de 19 grados no está afinada" {
    assert.equals(false, jupiter19.afinado())
}

const jupiter26 = new Jupiter(sordina=false, temperatura=26)
test "Una trompeta Júpiter a una temperatura ambiente de 26 grados no está afinada" {
    assert.equals(false, jupiter26.afinado())
}

const jupiter19afinada = new Jupiter(sordina=false, temperatura=19)
test "Una trompeta Júpiter a una temperatura ambiente de 19 grados, si la afinamos, pasa a estar afinada" {
    jupiter19afinada.afinar()
    assert.equals(true, jupiter19afinada.afinado())
}

const jupiterSinSordina = new Jupiter(sordina=false, temperatura=20)
test "La trompeta cuesta sin sordina 30 chelines" {
    assert.equals(30, jupiterSinSordina.costo())
}

const jupiterConSordina = new Jupiter(sordina=true, temperatura=20)
test "La trompeta cuesta con sordina 35 chelines" {
    assert.equals(35, jupiterConSordina.costo())
}

const jupiterNoValiosa = new Jupiter(sordina=false, temperatura=20)
test "La trompeta no es valiosa" {
    assert.equals(false, jupiterNoValiosa.esValioso())
}

const piano5 = new Bechstein()
test "El piano en una habitación de 5x5 está afinado" {
    assert.equals(true, piano5.afinado())
}

const piano20 = new Bechstein(ancho=5, largo=4)
test "El piano en una habitación chica (de 20 metros cuadrados) no está afinado" {
    assert.equals(false, piano20.afinado())
}

test "El costo del piano en la habitación de 5x5 es de 10" {
    assert.equals(10, piano5.costo())
}

test "El piano es valioso en la habitación inicial de 5x5" {
    assert.equals(true, piano5.esValioso())
}

test "El piano movido a una habitación chica (de 20 metros cuadrados) no es valioso" {
    assert.equals(false, piano20.esValioso())
}

const stagg0 = new Stagg(tremolo=0, pintura="")
test "El violín Stagg comienza afinado (0 trémolos)" {
    assert.equals(true, stagg0.afinado())
}

const stagg9 = new Stagg(tremolo=9, pintura="")
test "El violín con 9 trémolos todavía está afinado" {
    assert.equals(true, stagg9.afinado())
}

const stagg10 = new Stagg(tremolo=10, pintura="")
test "El violín luego de 10 trémolos exactos queda desafinado" {
    assert.equals(false, stagg10.afinado())
}

const staggCostoInicial = new Stagg(tremolo=0, pintura="")
test "El violín tiene un costo inicial de 20 chelines (sin trémolos)" {
    assert.equals(20, staggCostoInicial.costo())
}

const stagg2 = new Stagg(tremolo=2, pintura="")
test "Con exactamente 2 trémolos, el violín tiene un costo de 18 chelines" {
    assert.equals(18, stagg2.costo())
}

const stagg10costo = new Stagg(tremolo=10, pintura="")
test "Con 10 trémolos, el violín tiene un costo de 15 chelines (nunca baja de 15)" {
    assert.equals(15, stagg10costo.costo())
}

const staggLaca = new Stagg(tremolo=0, pintura="laca acrílica")
test "Pintado con laca acrílica, el violín es valioso" {
    assert.equals(true, staggLaca.esValioso())
}

const staggLatex = new Stagg(tremolo=0, pintura="látex satinado")
test "Pintado con látex satinado, el violín no es valioso" {
    assert.equals(false, staggLatex.esValioso())
}

test "Johann es feliz con una trompeta Jupiter (que es cara)" {
    johann.cambiarInstrumento(new Jupiter(sordina=true, temperatura=20))
    assert.equals(true, johann.esFeliz())
}

test "Johann no es feliz con un violín Stagg (sin trémolos, que no es cara)" {
    johann.cambiarInstrumento(new Stagg(tremolo=0, pintura="mate"))
    assert.equals(false, johann.esFeliz())
}

test "Wolfgang es feliz si Johann tiene una trompeta Jupiter" {
    johann.cambiarInstrumento(new Jupiter(sordina=true, temperatura=20))
    assert.equals(true, wolfgang.esFeliz())
}

test "Wolfgang no es feliz si Johann tiene un violín Stagg (sin trémolos)" {
    johann.cambiarInstrumento(new Stagg(tremolo=0, pintura="mate"))
    assert.equals(false, wolfgang.esFeliz())
}

test "Giuseppe es feliz con una guitarra Fender (que está siempre afinada)" {
    giuseppe.cambiarInstrumento(new FenderStratocaster(color="rojo"))
    assert.equals(true, giuseppe.esFeliz())
}
test "Giuseppe no es feliz con un piano Bechstein en una habitación de un metro cuadrado" {
    giuseppe.cambiarInstrumento(new Bechstein(ancho=1, largo=1))
    assert.equals(false, giuseppe.esFeliz())
}

test "Maddalena con el violín Stagg sin trémolos es feliz (costo 20, es par)" {
    maddalena.cambiarInstrumento(new Stagg(tremolo=0, pintura="mate"))
    assert.equals(true, maddalena.esFeliz())
}

test "Maddalena con el violín Stagg con un trémolo no es feliz (costo 19, es impar)" {
    maddalena.cambiarInstrumento(new Stagg(tremolo=1, pintura="mate"))
    assert.equals(false, maddalena.esFeliz())
}

test "En la asociación los músicos felices deben ser Giuseppe y Maddalena" {
    johann.cambiarInstrumento(new Stagg(tremolo=0, pintura="mate"))
    wolfgang.cambiarInstrumento("")
    giuseppe.cambiarInstrumento(new FenderStratocaster(color="rojo"))
    maddalena.cambiarInstrumento(new Stagg(tremolo=0, pintura="mate"))
    
    const musicosFelices = [johann, wolfgang, giuseppe, maddalena].filter({m => m.esFeliz()})
    assert.equals([giuseppe, maddalena], musicosFelices)
}

// 3
// Musicos
test "Un músico es experto porque su preferencia coincide con la del instrumento que tiene" {
    const musico = new Musico(preferencia = "Viento", instrumento=new Jupiter(sordina=true, temperatura=20))
    assert.equals(true, musico.esExperto())
}

test "Un músico cuya preferencia de familia no coincide con la del instrumento no es experto" {
    const musico = new Musico(preferencia = "Cuerdas", instrumento=new Jupiter(sordina=true, temperatura=20))
    assert.equals(false, musico.esExperto())
}

test "Un músico feliz porque la trompeta Jupiter tiene sordina y es copada" {
    const musico = new Musico(preferencia = "Viento", instrumento=new Jupiter(sordina=true, temperatura=20))
    assert.equals(true, musico.esFeliz())
}

test "Un músico no es feliz porque la trompeta Jupiter no tiene sordina y no es copada" {
    const musico = new Musico(preferencia = "Viento", instrumento=new Jupiter(sordina=false, temperatura=20))
    assert.equals(false, musico.esFeliz())
}

test "Un músico común no es feliz ni con violín Stagg ni con guitarra Fender" {
    const musico = new Musico(preferencia = "Cuerdas", instrumento=new Stagg(tremolo=0, pintura="mate"))
    assert.equals(false, musico.esFeliz())

    musico.cambiarInstrumento(new FenderStratocaster(color="azul"))
    assert.equals(false, musico.esFeliz())
}

test "Un músico común que es feliz con un piano Bechstein (largo o ancho > 6)" {
    const musico = new Musico(preferencia = "Cuerdas",instrumento=new Bechstein(largo=7, ancho=3))
    assert.equals(true, musico.esFeliz())

    musico.cambiarInstrumento(new Bechstein(largo=3, ancho=8))
    assert.equals(true, musico.esFeliz())
}

test "Un músico común no es feliz si la habitación no es suficientemente ancha ni larga" {
    const musico = new Musico(preferencia = "Cuerdas", instrumento=new Bechstein(largo=5, ancho=5))
    assert.equals(false, musico.esFeliz())
}

test "Un músico con preferencia por percusión no es feliz con un instrumento de cuerdas" {
    const musico = new Musico(preferencia = "Percusion", instrumento= new Stagg(tremolo=0, pintura="mate"))
    assert.equals(false, musico.esExperto() || musico.esFeliz())
}

// Orquesta

test "No se puede agregar dos veces el mismo músico" {
    const orquesta = new Orquesta(maximoDeMusicos = 3)
    const musico = new Musico(preferencia = "viento", instrumento=new Bechstein(largo=8, ancho=3))

    orquesta.agregarMusico(musico)
    orquesta.agregarMusico(musico)
    
    assert.equals(1, orquesta.getMusicos().size())
}

test "No se puede agregar más músicos del permitido" {
    const orquesta = new Orquesta(maximoDeMusicos = 2)
    const m1 = new Musico(preferencia = "viento", instrumento=new Bechstein(largo=8, ancho=3))
    const m2 = new Musico(preferencia = "cuerdas", instrumento=new Bechstein(largo=8, ancho=3))
    const m3 = new Musico(preferencia = "percusion", instrumento=new Bechstein(largo=8, ancho=3))

    orquesta.agregarMusico(m1)
    orquesta.agregarMusico(m2)
    orquesta.agregarMusico(m3)

    assert.equals(2, orquesta.getMusicos().size())
}

test "Se pueden agregar músicos mientras no se exceda el máximo" {
    const orquesta = new Orquesta(maximoDeMusicos = 3)
    const m1 = new Musico(preferencia = "viento", instrumento=new Bechstein(largo=8, ancho=3))
    const m2 = new Musico(preferencia = "cuerdas", instrumento=new Bechstein(largo=8, ancho=3))

    orquesta.agregarMusico(m1)
    orquesta.agregarMusico(m2)
    
    assert.equals(2, orquesta.getMusicos().size())
}

test "Una orquesta está bien conformada porque todos sus integrantes son felices" {
    const orquesta = new Orquesta(maximoDeMusicos = 2)
    const m1 = new Musico(preferencia = "viento", instrumento = new Jupiter(sordina=true, temperatura=20))
    const m2 = new Musico(preferencia = "cuerdas", instrumento=new Bechstein(largo=8, ancho=3))

    orquesta.agregarMusico(m1)
    orquesta.agregarMusico(m2)

    assert.equals(true, orquesta.estaBienFormada())
}

test "Una orquesta no está bien conformada porque alguno de sus integrantes no es feliz" {
    const orquesta = new Orquesta(maximoDeMusicos = 2)
    const m1 = new Musico(preferencia = "viento", instrumento=new Jupiter(sordina=false, temperatura=20))
    const m2 = new Musico(preferencia = "cuerdas", instrumento=new Bechstein(largo=8, ancho=3))

    orquesta.agregarMusico(m1)
    orquesta.agregarMusico(m2)

    assert.equals(false, orquesta.estaBienFormada())
}
